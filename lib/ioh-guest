#!/bin/sh

# List Guests
__list() {
	local flags=$1
	local pools="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | uniq )"
	(
	printf "%s^%s^%s^%s^%s\n" "Guest" "VMM?" "Running" "rcboot?" "Description"
	for pool in $pools; do
	local guests="$(zfs list -H | grep -i ^$pool/iohyve | grep -Ev "disk|ISO|Firmware" | cut -f 1 | cut -d'/' -f 3 | sed 1d | uniq)"
		for g in $guests; do
			local vmm="/dev/vmm/ioh-$g"
			if [ -e $vmm ]; then
				vmm="YES"
			else
				vmm="NO"
			fi
			local running=$(pgrep -fx "bhyve: ioh-$g")
			if [ -z "$running" ]; then
				running="NO"
			else
				running="YES"
			fi
			local boot="$(zfs get -H -o value iohyve:boot $pool/iohyve/$g)"
			if [ "$boot" = '1' ]; then
				boot="YES"
			else
				boot="NO"
			fi
		local description="$(zfs get -H -o value iohyve:description $pool/iohyve/$g)"
		printf "%s^%s^%s^%s^%s\n" "$g" "$vmm" "$running" "$boot" "$description"
		done
	done
	) | column -ts^ |
	(
		if [ "$flags" = '-l' ]
		then
			less
		else
			cat
		fi
	)

}

# Display info about all guests.
__info() {
	local flags=$1

	# Poll to see what pools have active guests
	local pools="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | uniq)"

	( # Begining of very large table of output.
	# Print common header
	printf "%s^%s^%s^%s^%s" "Guest" "Size" "CPU" "RAM" "Pool"

	# Print headers for -v flag
	if [ -n "$(echo "$flags" | grep 'v')" ]; then
		printf "^%s^%s^%s^%s" "OS" "Loader" "Tap" "Con"
	fi

	# Print headers for -s flag
	if [ -n "$(echo "$flags" | grep 's')" ]; then
		printf "^%s^%s^%s" "VMM?" "Running" "rcboot?"
	fi

	# Print headers for -d flag
	if [ -n "$(echo "$flags" | grep 'd')" ]; then
		printf "^%s" "Description"
	fi

	# Print new line for first guest.
	printf "\n"

	# Spider through pools
	for pool in $pools; do
		# Poll to see which guests are on $pool
		local guests="$(zfs list -H -o name | grep $pool/iohyve | grep -v -e ISO -e Firmware | cut -d '/' -f 3- | sed 1d)"
		# Spider through guests
		for g in $guests; do

			# Poll variables for common section
			local size="$(zfs get -H -o value volsize $pool/iohyve/$g)"
			local cpu="$(zfs get -H -o value iohyve:cpu $pool/iohyve/$g)"
			local ram="$(zfs get -H -o value iohyve:ram $pool/iohyve/$g)"

			# Print common section (guest, size, cpu, raml)
			printf "%s^%s^%s^%s^%s" "$g" "$size" "$cpu" "$ram" "$pool"

			# Get variable and print for verbose section (os, loader, tap, con)
			if [ -n "$(echo "$flags" | grep 'v')" ]; then
				local os="$(zfs get -H -o value iohyve:os $pool/iohyve/$g)"
				local loader="$(zfs get -H -o value iohyve:loader $pool/iohyve/$g)"
				local tap="$(zfs get -H -o value iohyve:tap $pool/iohyve/$g)"
				local con="$(zfs get -H -o value iohyve:con $pool/iohyve/$g)"

				printf "^%s^%s^%s^%s" "$os" "$loader" "$tap" "$con"
			fi

			# Get info, set variables, and print for status section (VMM, Running, rcboot)
			if [ -n "$(echo "$flags" | grep 's')" ] && [ -z "$(echo "$g" | grep 'disk')" ]; then
				local vmm="/dev/vmm/ioh-$g"
				if [ -e $vmm ]; then
					vmm="YES"
				else
					vmm="NO"
				fi
				local running=$(pgrep -fx "bhyve: ioh-$g")
				if [ -z "$running" ]; then
					running="NO"
				else
					running="YES"
				fi
				local boot="$(zfs get -H -o value iohyve:boot $pool/iohyve/$g)"
				if [ "$boot" = '1' ]; then
					boot="YES"
				else
					boot="NO"
				fi

				printf "^%s^%s^%s" "$vmm" "$running" "$boot"
			# Checks to see if disk portion of guest and uses "-"s if so for this section.
			elif [ -n "$(echo "$flags" | grep 's')" ] && [ -n "$(echo "$g" | grep 'disk')" ]; then
				printf "^-^-^-"
			fi

			# Print description if flag set
			if [ -n "$(echo "$flags" | grep 'd')" ]; then
				local description="$(zfs get -H -o value iohyve:description $pool/iohyve/$g)"
				printf "^%s" "$description"
			fi

			# Print new line for next guest.
			printf "\n"
		done
	done
	) | column -ts^ |
	(
		if [ -n "$(echo "$flags" | grep 'l')" ]
		then
			less
		else
			cat
		fi
	)
}

# Create guest
__create() {
	local name=$2
	local pool="${4-$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n 1)}"
	local size=$3
	if [ -z "$size" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} create <name> <size> [pool]\n"
		exit 1
	fi
	local description="$(date)"
	local guestlist="$(zfs list -H -o name -t volume | grep iohyve | cut -d '/' -f 1-3)"
	listtaps() {
		for i in $guestlist ; do
			local tapprop="$(zfs get -H -o value iohyve:tap $i)"
			printf $tapprop'\n'
		done
	}
	local taplast="$(listtaps | sort -V | cut -c 4- | tail -n 1)"
	if [ -z "$taplast" ]; then
		local tap=0
	else
        local tap="$((taplast + 1))"
	fi
	listcons() {
		for i in $guestlist ; do
			local conprop="$(zfs get -H -o value iohyve:con $i)"
			printf $conprop'\n'
		done
	}
	local conlast="$(listcons | sort -V | cut -c 5- | tail -n 1)"
	if [ -z "$conlast" ]; then
		local con=0
	else
        local con="$((conlast + 1))"
	fi
	echo "Creating $name..."
	zfs create $pool/iohyve/$name
	zfs create -V $size -o volmode=dev $pool/iohyve/$name/disk0
	zfs set \
        iohyve:name=$name \
	    iohyve:size=$size \
	    iohyve:ram=256M \
	    iohyve:cpu=1 \
	    iohyve:tap=tap$tap \
	    iohyve:con=nmdm$con \
	    iohyve:persist=1 \
	    iohyve:boot=0 \
	    iohyve:loader=bhyveload \
	    iohyve:os=default \
	    "iohyve:description=$description" \
	    iohyve:bargs=-A_-H_-P \
        $pool/iohyve/$name
}

# Install guest
__install() {
	local name=$2
	local iso=$3
	if [ -z "$iso" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} install <name> <ISO>\n"
		exit 1
	fi
	local pool="$(zfs list -H -t volume -o name | grep iohyve/$name.*disk0 | cut -d '/' -f 1)"
	local dataset="$(zfs list -H -t volume | grep iohyve/$name | cut -d '/' -f 1-3 | head -n 1)"
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z "$running" ]; then
			local ram="$(zfs get -H -o value iohyve:ram $dataset)"
			local con="$(zfs get -H -o value iohyve:con $dataset)"
			local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
			local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
			local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
			echo "Installing $name..."
			# Set install prop
			zfs set iohyve:install=yes $pool/iohyve/$name
			# Load from CD
			__load "$name" "/iohyve/ISO/$iso/$iso"
			# Prepare and start guest
			pci="$(__prepare_guest $name) ahci-cd,/iohyve/ISO/$iso/$iso"
			local pci_args=$(__get_bhyve_cmd "$pci" )
			bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
		else
			echo "Guest is already running."
		fi
	else
		echo "Not a valid guest name"
	fi
}

# Load guest
__load() {
	local name=$1
	local media=$2
	if [ -z "$media" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} load <name> <path/to/bootdisk>\n"
		exit 1
	fi
	local disk="${3-$(zfs list -H -t volume -o name | grep iohyve/$name.*disk0 | head -n 1)}"
	local dataset="$(zfs list -H -t volume -o name | grep iohyve/$name.*disk0 | cut -d '/' -f 1-3 | head -n 1)"
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local loader="$(zfs get -H -o value iohyve:loader $dataset)"
	local install="$(zfs get -H -o value iohyve:install $dataset)"
	local os="$(zfs get -H -o value iohyve:os $dataset)"
	local autogrub="$(zfs get -H -o value iohyve:autogrub $dataset)"
	local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
	local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
	#Testing if -S is in the bargs settings. If then pass -S to bhyveload.
	local test_for_wire_memory="-S"
	case $bargs in
		*${test_for_wire_memory}*) local wire_memory="-S" ;;
		*) local wire_memory="" ;;
	esac
	if [ "$loader" = "grub-bhyve" ]; then
		echo "GRUB Process does not run in background...."
		echo "If your terminal appears to be hanging, check iohyve console $name in second terminal to complete GRUB process..."
		if [ $install = "yes" ]; then
            case $os in
                openbsd59)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.9/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
			    openbsd58)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.8/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
			    openbsd57)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 (cd0)/5.7/amd64/bsd.rd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
			    netbsd)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'knetbsd -h -r cd0a (cd0)/netbsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
			    debian)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory-m /iohyve/$name/device.map -r cd0  -c /dev/${con}A -M $ram ioh-$name
                ;;
                d8lvm)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r cd0 -c /dev/${con}A -M $ram ioh-$name
                ;;
                centos[67])
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'linux (cd0)/isolinux/vmlinuz\ninitrd (cd0)/isolinux/initrd.img\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                arch)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'linux (cd0)/arch/boot/x86_64/vmlinuz archisobasedir=arch archisolabel=ARCH_'$(date +%Y%m)' ro\ninitrd (cd0)/arch/boot/x86_64/archiso.img\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                custom)
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                *)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r cd0 -c /dev/${con}A -M $ram ioh-$name
            esac
		elif [ $install = "no" ]; then
            case $os in
                openbsd59)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                openbsd58)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                openbsd57)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'kopenbsd -h com0 -r sd0a (hd0,openbsd1)/bsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                netbsd)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				printf 'knetbsd -h -r wd0a (hd0,msdos1)/netbsd\nboot\n' > /iohyve/$name/grub.cfg
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                debian)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioh-$name
                ;;
                d8lvm)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub -c /dev/${con}A -M $ram ioh-$name
                ;;
                centos6)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub -c /dev/${con}A -M $ram ioh-$name
                ;;
                centos7)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -d /grub2 -c /dev/${con}A -M $ram ioh-$name
                ;;
                custom)
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r host -d /iohyve/$name -c /dev/${con}A -M $ram ioh-$name
                ;;
                *)
				printf '\(hd0\)\ /dev/zvol/'$disk'\n' > /iohyve/$name/device.map
				printf '\(cd0\)\ '$media'\n' >> /iohyve/$name/device.map
				grub-bhyve $wire_memory -m /iohyve/$name/device.map -r hd0,msdos1 -c /dev/${con}A -M $ram ioh-$name
                ;;
           esac
		fi
	else
		bhyveload $wire_memory -m $ram -d $media -c /dev/${con}A ioh-$name
	fi
}

# Boot guest
__boot() {
	local name=$1
	if [ -z "$name" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} boot <name> [runmode] [pcidevices]\n"
		exit 1
	fi
	# runmode (runonce/persist)
	#   0 = once
	#   1 = persist regular (stop if guest is powering off)
	#   2 = always persist (start again even if guest is powering off)
	local runmode=$2
	local pci=$3
	local dataset="$(zfs list -H -t volume | grep iohyve/$name.*disk0 | cut -d '/' -f 1-3 | head -n 1)"
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
	local persist="$(zfs get -H -o value iohyve:persist $dataset)"
	local bargexist="$(zfs get -H -o value iohyve:bargs $dataset)"
	local bargs="$(echo $bargexist | sed -e 's/_/ /g')"
	# Set install prop
	zfs set iohyve:install=no $dataset
	# Generate list of bhyve -s commands for all devices
	local pci_args=$(__get_bhyve_cmd "$pci" )
	# Handle the starting of the guest inside a spawned subshell so the guest
	# can be restarted automatically if the guest reboots or crashes
	local runstate="1"
	(
		while [ $runstate = "1" ]; do
			__load "$name" "/dev/zvol/$dataset/disk0"
			bhyve -c $cpu $bargs -m $ram $pci_args -lcom1,/dev/${con}A ioh-$name &
			local vmpid=$!
			wait $vmpid
			vmrc=$?
			sleep 5
			if [ $runmode -eq 0 ]; then
				runstate="0"
			elif [ $vmrc -eq 1 ] && [ $runmode -ne 2 ]; then
				# VM has been powered off
				runstate=0
			else
				if [ $(zfs get -H -o value iohyve:persist $dataset) -ne 1 ]; then
					runstate=0
				fi
			fi
		done
		bhyvectl --destroy --vm=ioh-$name
		# Resetting the flag so that a vm which we stopped by abusing zfs set/get
		# as as an IPC mechanism is persistent again next time we start it
		if [ -n "$persist" ]; then
			zfs set iohyve:persist="$persist" $dataset
		fi
	) &
}

__prepare_guest() {
	local name=$1
	local dataset="$(zfs list -H -t volume | grep iohyve/$name.*disk0 | cut -d '/' -f 1-3 | head -n 1)"
	local pci="$(__get_zfs_pcidev_conf $dataset)"
	# Setup tap if needed
	local listtap="$(zfs get -H -o value iohyve:tap $dataset)"
	for tap in $(echo $listtap | head -n 1 | tr ',' '\n'); do
		if [ -n "$tap" ] && [ "$tap" != "-" ]; then
			local tapif="$(ifconfig -l | tr ' ' '\n' | grep -F -w $tap)"
			if [ -z "$tapif" ]; then
				# create tap interface
				ifconfig $tap create descr "iohyve-$name"
				ifconfig bridge0 addm $tap
			fi
			# Add a virtio-net pci device for the tap
			local mac="$(zfs get -H -o value iohyve:mac_$tap $dataset)"
			if [ "$mac" = "-" ]; then
				pci="$pci virtio-net,$tap"
			else
				pci="$pci virtio-net,${tap},mac=${mac}"
			fi
		fi
	done
	#Add disk as second PCI device
	pci="ahci-hd,/dev/zvol/$dataset/disk0 $pci"
	#Add Hostbridge and lpc as the first PCI devices
	pci="hostbridge lpc $pci"
	# return the list of pci devices
	echo $pci
}

# Start guest (combine load and boot)
__start() {
	local name=$2
	if [ -z "$name" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} start <name> [-s | -a]\n"
		exit 1
	fi
	local flag=$3
	local pci=""
	local runmode="1"
	local pool="$(zfs list -H -t volume -o name | grep iohyve/$name.*disk0 | cut -d '/' -f 1)"
	local dataset="$(zfs list -H -t volume -o name | grep iohyve/$name.*disk0 | cut -d '/' -f 1-3 | head -n 1)"
	local loader="$(zfs get -H -o value iohyve:loader $dataset)"
	# Check if loader is UEFI
	if [ "$loader" = "uefi" ]; then
		__uefi "$name" "null.iso"
	fi
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z "$running" ]; then
			case "$flag" in
				-s)	runmode="0"	;; # single - start only once
				-a) runmode="2"	;; # always - persist regardless what
				 *)	runmode="1"	;; # persist - persists until guest is powering off
			esac
			echo "Starting $name... (Takes ~15 seconds for FreeBSD guests)"
			# Prepare and boot guest
			pci="$(__prepare_guest $name)"
			__boot "$name" "$runmode" "$pci"
		else
			echo "Guest is already running."
		fi
	else
		echo "Not a valid guest name: $name"
	fi
}

# Start a UEFI enabled bhyve instance.
# This is experimental, use with caution.
__uefi() {
	local name=$2
	local media=$3
	if [ -z "$media" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} uefi <name> <ISO>\n"
		exit 1
	fi
	local dataset="$(zfs list -H -t volume | grep iohyve/$name | cut -d '/' -f 1-3 | head -n 1)"
	local ram="$(zfs get -H -o value iohyve:ram $dataset)"
	local con="$(zfs get -H -o value iohyve:con $dataset)"
	local cpu="$(zfs get -H -o value iohyve:cpu $dataset)"
	local fw="$(zfs get -H -o value iohyve:fw $dataset)"
	local tap="$(zfs get -H -o value iohyve:tap $dataset)"
	local bargs="$(zfs get -H -o value iohyve:bargs $dataset | sed -e 's/_/ /g')"
	local pool="$(zfs list -H -t volume -o name | grep iohyve/$name | cut -d '/' -f 1)"
	# Create tap if needed
	# check to see if tap is already created before attempting to create new tap interface
	local tapif="$(ifconfig -l | tr ' ' '\n' | grep -F -w $tap)"
	if [ -z "$tapif" ]; then
		# create tap interface
		ifconfig $tap create descr "iohyve-$name"
		ifconfig bridge0 addm $tap
	fi
	# Make sure everything is in order...
	if [ "$fw" = '-' ]; then
		echo "You must set a firmware file property to use UEFI..."
	fi
	# Check if guest exists
	if [ -d /iohyve/$pool/$name ] || [ -d /iohyve/$name ]; then
		# Check to make sure guest isn't running
		local running=$(pgrep -fx "bhyve: ioh-$name")
		if [ -z "$running" ]; then
			# The good stuff...
			bhyve -c $cpu $bargs \
				-m $ram \
				-s 0,hostbridge \
				-s 3,ahci-cd,/iohyve/ISO/$media/$media \
				-s 4,ahci-hd,/dev/zvol/$dataset/disk0,sectorsize=512 \
				-s 10,virtio-net,$tap \
				-s 31,lpc \
				-l com1,/dev/${con}A \
				-l bootrom,/iohyve/Firmware/$fw/$fw \
				ioh-$name &
		else
			echo "Guest is already running."
		fi
	else
		echo "Not a valid guest name"
	fi
}

# Gracefully stop a guest
__stop() {
	local name=$2
	if [ -z "$name" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} stop <name>\n"
		exit 1
	fi
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n 1)"
	local pid=$(pgrep -fx "bhyve: ioh-$name")
	echo "Stopping $name..."
#	zfs set iohyve:persist=0 $pool/iohyve/$name
	kill $pid
#	sleep 20
#	bhyvectl --destroy --vm=ioh-$name
}

# Force kill -9 everyting matching $name and destroy
# THIS WILL KILL EVERYTHING MATCHING $NAME
__forcekill() {
	local name=$2
	if [ -z "$name" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} forcekill <name>\n"
		exit 1
	fi
	local pids="$(pgrep -f $name)"
	for apid in "$pids"; do
		kill -9 $apid
	done
	bhyvectl --destroy --vm=ioh-$name
}

# Gracefully shut down all guests via ACPI (Does not destroy)
__scram() {
	echo "Shutting down all guests..."
	local pids="$(pgrep -f ioh-)"
	for apid in "$pids"; do
		kill $apid
	done
	wait_for_pids $pids
}

# Destroy guest
__destroy() {
	local name=$2
	if [ -z "$name" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} destroy <name>\n"
		exit 1
	fi
	local pool="$(zfs list -H | grep iohyve | cut -d '/' -f 1 | head -n 1)"
	echo "Destroying $name..."
#	zfs set iohyve:persist=0 $pool/iohyve/$name
	bhyvectl --force-poweroff --vm=ioh-$name
	bhyvectl --destroy --vm=ioh-$name
}

# Rename the guest
__rename() {
	local name=$2
	local newname=$3
	if [ -z "$newname" ]; then
		printf "missing argument\nusage:\n"
		printf "\t${0##*/} rename <name> <newname>\n"
		exit 1
	fi
	local pool="$(zfs list -H -t volume | grep iohyve/$name | cut -d '/' -f 1 | head -n 1)"
	echo "Renaming $name to $newname..."
	zfs rename -f $pool/iohyve/$name $pool/iohyve/$newname
	zfs set iohyve:name=$newname $pool/iohyve/$newname
}

# Delete guest
__delete() {
	local flagone=$2
	local flagtwo=$3
	if [ "$flagone" = "-f" ]; then
		if [ -z "$flagtwo" ]; then
			printf "missing argument\nusage:\n"
			printf "\t${0##*/} delete [-f] <name>\n"
			exit 1
		fi
		local target_dataset="$(zfs list -H -t filesystem -o name | grep iohyve.*$flagtwo | head -n 1)"
		echo ""
		echo "[WARNING] Forcing permanent deletion of $flagtwo"
		echo "Location: $target_dataset including children and clones"
		echo ""
		echo "Hit Ctrl+C in the next 10 seconds to cancel..."
		sleep 10
		echo "Deleting $flagtwo at $target_dataset..."
		zfs destroy -rR $target_dataset
	else
		if [ -z "$flagone" ]; then
			printf "missing argument\nusage:\n"
			printf "\t${0##*/} delete [-f] <name>\n"
			exit 1
		fi
		local target_dataset="$(zfs list -H -t filesystem -o name | grep iohyve.*$flagone | head -n 1)"
		echo ""
		echo "[WARNING] Are you sure you want to permanently delete $flagone and all child datasets?"
		read -p "Location: $target_dataset [Y/N]? " an </dev/tty
		case "$an" in
			y|Y) echo "Deleting $flagone at $target_dataset..."; zfs destroy -r $target_dataset
 			;;
			*) echo "$flagone not deleted..."
		esac
	fi
}

__get_bhyve_cmd() {
	local devices=$1
	local pci_slot_count=0
	for device in $devices ; do
		echo "-s $pci_slot_count,$device"
		pci_slot_count=$((pci_slot_count + 1))
	done
}
